name: ci

on:
  push:
    branches:
      - 'main'
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间的0:00执行一次，检测新版本
  workflow_dispatch:  # 手动触发的事件
    inputs:
      manual_trigger:
        description: 'Manually trigger the workflow'
        default: 'true'
        required: false

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest Flexget release
        id: get_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/Flexget/Flexget/releases/latest | jq -r '.tag_name')
          echo "TAG_NAME=$latest_release" >> $GITHUB_ENV

      - name: Compare with stored release
        id: compare_release
        run: |
          stored_release=$(cat stored_release.txt 2>/dev/null || echo "")
          latest_release=$TAG_NAME
          if [ "$stored_release" != "$latest_release" ]; then
            echo "New release detected: $latest_release"
            echo "$latest_release" > stored_release.txt
          else
            echo "No new release found. Exiting."
            exit 0  # 如果没有新版本，退出工作流程
          fi
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # -
      #   name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # -
      #   name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/flexget:latest

      - name: Set up Git
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER }}"

      - name: Make changes to repository
        run: |
          git add ./stored_release.txt
          git commit -m "Update $latest_release"

      - name: Push changes back to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin main